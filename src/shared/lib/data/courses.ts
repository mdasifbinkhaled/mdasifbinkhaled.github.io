// Course data for teaching portfolio
import type {
  CourseData,
  CourseInstitution,
  CourseStatus,
} from '@/shared/types';

export const institutionNames: Record<CourseInstitution, string> = {
  IUB: 'Independent University, Bangladesh (IUB)',
  BRACU: 'BRAC University',
};

// IUB Courses (as Senior Lecturer)
export const coursesTaughtIUB: CourseData[] = [
  {
    id: 'iub-cse101-fall2023',
    code: 'CSE 101',
    title: 'Introduction to Programming',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Fall',
    year: 2023,
    description:
      'Fundamentals of programming concepts, problem-solving techniques, and introduction to C programming language.',
    objectives: [
      'Understand basic programming concepts and logic',
      'Learn to write structured and modular programs',
      'Develop problem-solving skills using algorithmic thinking',
      'Master C programming syntax and features',
    ],
    outcomes: [
      'Students can write well-structured C programs',
      'Students can solve complex problems using programming',
      'Students understand memory management and pointers',
      'Students can debug and optimize their code',
    ],
    topics: [
      'Variables and Data Types',
      'Control Structures',
      'Functions and Recursion',
      'Arrays and Strings',
      'Pointers and Memory Management',
      'File I/O Operations',
    ],
    technologies: ['C Programming', 'Code::Blocks', 'GCC Compiler', 'GitHub'],
    assignments: [
      'Basic Calculator Implementation',
      'String Manipulation Program',
      'File Processing System',
      'Mini Database Project',
    ],
    projects: ['Student Management System', 'Library Management System'],
    assessment: {
      midterm: 25,
      final: 35,
      assignments: 20,
      projects: 15,
      participation: 5,
    },
    enrollmentCount: 45,
    rating: 4.7,
    feedback: [
      'Clear explanations and practical examples',
      'Good balance of theory and hands-on practice',
      'Helpful in office hours',
    ],
    iconName: 'Code2',
    status: 'completed',
  },
  {
    id: 'iub-cse201-spring2024',
    code: 'CSE 201',
    title: 'Algorithms',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Spring',
    year: 2024,
    description:
      'Design and analysis of algorithms, complexity theory, and advanced data structures.',
    objectives: [
      'Analyze time and space complexity of algorithms',
      'Design efficient algorithms for various problems',
      'Understand advanced data structures',
      'Apply algorithmic techniques to real-world problems',
    ],
    outcomes: [
      'Students can analyze algorithm complexity',
      'Students can design optimal solutions',
      'Students understand graph algorithms',
      'Students can implement advanced data structures',
    ],
    topics: [
      'Algorithm Analysis',
      'Sorting and Searching',
      'Graph Algorithms',
      'Dynamic Programming',
      'Greedy Algorithms',
      'Network Flow',
    ],
    technologies: ['C++', 'Python', 'Algorithm Visualizer', 'LeetCode'],
    assignments: [
      'Sorting Algorithm Comparison',
      'Graph Traversal Implementation',
      'Dynamic Programming Solutions',
      'Optimization Problems',
    ],
    projects: ['Route Optimization System', 'Social Network Analysis Tool'],
    assessment: {
      midterm: 30,
      final: 40,
      assignments: 20,
      projects: 10,
    },
    enrollmentCount: 38,
    rating: 4.8,
    feedback: [
      'Challenging but rewarding course',
      'Great use of visual aids for complex concepts',
      'Well-structured progression of topics',
    ],
    iconName: 'Brain',
    status: 'completed',
  },
  {
    id: 'iub-cse203-fall2024',
    code: 'CSE 203',
    title: 'Data Structures',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Fall',
    year: 2024,
    description:
      'Implementation and application of fundamental data structures including arrays, linked lists, stacks, queues, trees, and graphs.',
    objectives: [
      'Implement fundamental data structures',
      'Choose appropriate data structures for problems',
      'Analyze performance characteristics',
      'Apply data structures in practical scenarios',
    ],
    outcomes: [
      'Students can implement all major data structures',
      'Students can analyze space-time trade-offs',
      'Students can solve problems using appropriate structures',
      'Students understand memory management concepts',
    ],
    topics: [
      'Arrays and Linked Lists',
      'Stacks and Queues',
      'Trees and Binary Search Trees',
      'Heaps and Priority Queues',
      'Hash Tables',
      'Graph Representations',
    ],
    technologies: ['C++', 'Java', 'Data Structure Visualizer', 'Eclipse IDE'],
    assignments: [
      'Linked List Implementation',
      'Binary Tree Operations',
      'Hash Table with Collision Handling',
      'Graph Algorithms Implementation',
    ],
    projects: ['Expression Evaluator', 'File System Simulator'],
    assessment: {
      midterm: 25,
      final: 35,
      assignments: 25,
      projects: 15,
    },
    enrollmentCount: 42,
    rating: 4.6,
    feedback: [
      'Hands-on approach helps understanding',
      'Good progression from simple to complex',
      'Practical examples are very helpful',
    ],
    iconName: 'Database',
    status: 'ongoing',
  },
  {
    id: 'iub-cse205-spring2025',
    code: 'CSE 205',
    title: 'Discrete Mathematics',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Spring',
    year: 2025,
    description:
      'Mathematical foundations for computer science including logic, set theory, combinatorics, and graph theory.',
    objectives: [
      'Master mathematical reasoning and proof techniques',
      'Understand discrete mathematical structures',
      'Apply combinatorial and graph theory concepts',
      'Develop logical thinking skills',
    ],
    outcomes: [
      'Students can construct mathematical proofs',
      'Students understand formal logic systems',
      'Students can solve combinatorial problems',
      'Students can apply graph theory to CS problems',
    ],
    topics: [
      'Propositional and Predicate Logic',
      'Set Theory and Relations',
      'Functions and Sequences',
      'Combinatorics and Probability',
      'Graph Theory',
      'Number Theory',
    ],
    technologies: [
      'Mathematical Software',
      'Logic Proof Tools',
      'Graph Theory Software',
    ],
    assignments: [
      'Logic Proof Exercises',
      'Combinatorial Problem Sets',
      'Graph Theory Applications',
      'Number Theory Problems',
    ],
    assessment: {
      midterm: 30,
      final: 40,
      assignments: 20,
      quizzes: 10,
    },
    enrollmentCount: 35,
    iconName: 'Calculator',
    status: 'upcoming',
  },
  {
    id: 'iub-cse303-fall2023',
    code: 'CSE 303',
    title: 'Numerical Methods',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Fall',
    year: 2023,
    description:
      'Computational techniques for solving mathematical problems using numerical algorithms.',
    objectives: [
      'Understand numerical computation concepts',
      'Implement numerical algorithms',
      'Analyze convergence and stability',
      'Apply methods to engineering problems',
    ],
    outcomes: [
      'Students can implement numerical methods',
      'Students understand error analysis',
      'Students can solve differential equations numerically',
      'Students can optimize functions numerically',
    ],
    topics: [
      'Root Finding Methods',
      'Linear System Solutions',
      'Interpolation and Approximation',
      'Numerical Integration',
      'Differential Equation Solutions',
      'Optimization Techniques',
    ],
    technologies: [
      'MATLAB',
      'Python NumPy',
      'Jupyter Notebooks',
      'Mathematica',
    ],
    assignments: [
      'Root Finding Implementation',
      'Matrix Operations Program',
      'Interpolation Methods',
      'ODE Solver Implementation',
    ],
    projects: [
      'Engineering Problem Solver',
      'Scientific Calculator with Numerical Methods',
    ],
    assessment: {
      midterm: 25,
      final: 35,
      assignments: 25,
      projects: 15,
    },
    enrollmentCount: 28,
    rating: 4.5,
    feedback: [
      'Great integration of theory and programming',
      'MATLAB sessions were very helpful',
      'Clear explanation of complex mathematical concepts',
    ],
    iconName: 'Calculator',
    status: 'completed',
  },
  {
    id: 'iub-cse401-spring2024',
    code: 'CSE 401',
    title: 'Fundamentals of Computer System',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Spring',
    year: 2024,
    description:
      'Core concepts of computer architecture, system organization, and low-level programming.',
    objectives: [
      'Understand computer architecture principles',
      'Learn assembly language programming',
      'Analyze system performance characteristics',
      'Understand memory hierarchy and I/O systems',
    ],
    outcomes: [
      'Students understand CPU architecture',
      'Students can write assembly programs',
      'Students can analyze system performance',
      'Students understand memory management',
    ],
    topics: [
      'Computer Architecture Overview',
      'Instruction Set Architecture',
      'Assembly Language Programming',
      'Memory Hierarchy',
      'I/O Systems',
      'Performance Analysis',
    ],
    technologies: [
      'MIPS Assembly',
      'SPIM Simulator',
      'System Monitoring Tools',
    ],
    assignments: [
      'Assembly Language Programs',
      'CPU Simulation Project',
      'Memory Hierarchy Analysis',
      'Performance Benchmarking',
    ],
    projects: ['Simple CPU Simulator', 'Memory Management System'],
    assessment: {
      midterm: 30,
      final: 35,
      assignments: 20,
      projects: 15,
    },
    enrollmentCount: 32,
    rating: 4.4,
    feedback: [
      'Low-level concepts explained clearly',
      'Good use of simulation tools',
      'Challenging but well-supported',
    ],
    iconName: 'Server',
    status: 'completed',
  },
  {
    id: 'iub-cse403-fall2024',
    code: 'CSE 403',
    title: 'Finite Automata and Computability',
    institution: 'IUB',
    level: 'undergraduate',
    credits: 3,
    semester: 'Fall',
    year: 2024,
    description:
      'Theory of computation, formal languages, and computational complexity.',
    objectives: [
      'Understand formal language theory',
      'Design finite automata and grammars',
      'Analyze computational complexity',
      'Explore limits of computation',
    ],
    outcomes: [
      'Students can design automata',
      'Students understand formal grammars',
      'Students can prove language properties',
      'Students understand computational limits',
    ],
    topics: [
      'Finite Automata',
      'Regular Languages',
      'Context-Free Grammars',
      'Pushdown Automata',
      'Turing Machines',
      'Computational Complexity',
    ],
    technologies: ['JFLAP', 'Formal Language Tools', 'Automata Simulators'],
    assignments: [
      'Automata Design Problems',
      'Grammar Construction Exercises',
      'Complexity Analysis Tasks',
      'Proof Writing Assignments',
    ],
    projects: ['Language Recognition Tool', 'Automata Simulator'],
    assessment: {
      midterm: 30,
      final: 40,
      assignments: 20,
      projects: 10,
    },
    enrollmentCount: 25,
    rating: 4.3,
    feedback: [
      'Abstract concepts made concrete',
      'Good use of visualization tools',
      'Theoretical depth with practical examples',
    ],
    iconName: 'BookOpen',
    status: 'ongoing',
  },
];

// BRACU Courses (as Teaching Assistant)
export const coursesTaughtBRACU: CourseData[] = [
  {
    id: 'bracu-cg-lab-spring2022',
    code: 'CSE 423',
    title: 'Computer Graphics Lab',
    institution: 'BRACU',
    level: 'undergraduate',
    credits: 1,
    semester: 'Spring',
    year: 2022,
    description:
      'Practical application of computer graphics principles including 2D/3D transformations, rendering, and OpenGL programming.',
    objectives: [
      'Implement graphics algorithms',
      'Master OpenGL programming',
      'Create interactive graphics applications',
      'Understand rendering pipelines',
    ],
    outcomes: [
      'Students can implement graphics primitives',
      'Students can create 3D scenes',
      'Students understand transformation matrices',
      'Students can develop interactive applications',
    ],
    topics: [
      '2D Graphics Primitives',
      '3D Transformations',
      'OpenGL Programming',
      'Lighting and Shading',
      'Texture Mapping',
      'Animation Techniques',
    ],
    technologies: ['OpenGL', 'C++', 'Visual Studio', 'GLUT'],
    assignments: [
      '2D Drawing Application',
      '3D Object Modeling',
      'Animation Project',
      'Interactive Game Scene',
    ],
    projects: ['Simple 3D Game', 'Graphics Editor'],
    assessment: {
      assignments: 60,
      projects: 30,
      participation: 10,
    },
    enrollmentCount: 25,
    rating: 4.6,
    feedback: [
      'Hands-on lab sessions were excellent',
      'Clear guidance on OpenGL programming',
      'Creative projects encouraged learning',
    ],
    iconName: 'Code2',
    status: 'completed',
  },
  {
    id: 'bracu-nm-lab-summer2022',
    code: 'MAT 361',
    title: 'Numerical Methods Lab',
    institution: 'BRACU',
    level: 'undergraduate',
    credits: 1,
    semester: 'Summer',
    year: 2022,
    description:
      'Hands-on implementation of numerical computation methods using MATLAB and Python.',
    objectives: [
      'Implement numerical algorithms',
      'Master MATLAB programming',
      'Analyze numerical accuracy',
      'Apply methods to real problems',
    ],
    outcomes: [
      'Students can program numerical methods',
      'Students understand error analysis',
      'Students can use scientific computing tools',
      'Students can solve engineering problems numerically',
    ],
    topics: [
      'MATLAB Programming',
      'Root Finding Algorithms',
      'Matrix Computations',
      'Interpolation Methods',
      'Numerical Integration',
      'ODE Solvers',
    ],
    technologies: ['MATLAB', 'Python', 'NumPy', 'SciPy', 'Jupyter'],
    assignments: [
      'MATLAB Function Library',
      'Error Analysis Study',
      'Engineering Problem Solutions',
      'Optimization Implementation',
    ],
    projects: ['Scientific Calculator', 'Engineering Analysis Tool'],
    assessment: {
      assignments: 50,
      projects: 40,
      participation: 10,
    },
    enrollmentCount: 20,
    rating: 4.7,
    feedback: [
      'Great introduction to scientific computing',
      'MATLAB tutorials were very helpful',
      'Real-world applications made concepts clear',
    ],
    iconName: 'Calculator',
    status: 'completed',
  },
  {
    id: 'bracu-cd-lab-fall2022',
    code: 'CSE 420',
    title: 'Compiler Design Lab',
    institution: 'BRACU',
    level: 'undergraduate',
    credits: 1,
    semester: 'Fall',
    year: 2022,
    description:
      'Implementation of compiler components including lexical analysis, parsing, and code generation.',
    objectives: [
      'Implement compiler phases',
      'Understand language processing',
      'Build lexical analyzers and parsers',
      'Generate intermediate code',
    ],
    outcomes: [
      'Students can build lexical analyzers',
      'Students can implement parsers',
      'Students understand symbol tables',
      'Students can generate code',
    ],
    topics: [
      'Lexical Analysis',
      'Syntax Analysis',
      'Semantic Analysis',
      'Symbol Tables',
      'Intermediate Code Generation',
      'Code Optimization',
    ],
    technologies: ['Flex', 'Bison', 'C/C++', 'ANTLR', 'Compiler Tools'],
    assignments: [
      'Lexical Analyzer Implementation',
      'Parser Construction',
      'Symbol Table Management',
      'Code Generator',
    ],
    projects: [
      'Mini Compiler for Simple Language',
      'Expression Evaluator with Code Generation',
    ],
    assessment: {
      assignments: 50,
      projects: 45,
      participation: 5,
    },
    enrollmentCount: 18,
    rating: 4.4,
    feedback: [
      'Complex topic made understandable',
      'Step-by-step approach was helpful',
      'Good balance of theory and implementation',
    ],
    iconName: 'Brain',
    status: 'completed',
  },
  {
    id: 'bracu-android-lab-spring2023',
    code: 'CSE 489',
    title: 'Android Development Lab',
    institution: 'BRACU',
    level: 'undergraduate',
    credits: 1,
    semester: 'Spring',
    year: 2023,
    description:
      'Building mobile applications for Android platform using Java/Kotlin and Android SDK.',
    objectives: [
      'Master Android development basics',
      'Create user-friendly mobile interfaces',
      'Implement data persistence',
      'Integrate web services',
    ],
    outcomes: [
      'Students can build Android apps',
      'Students can design mobile UIs',
      'Students can handle data storage',
      'Students can consume REST APIs',
    ],
    topics: [
      'Android Studio and SDK',
      'Activities and Fragments',
      'User Interface Design',
      'Data Storage Options',
      'Networking and APIs',
      'Publishing Apps',
    ],
    technologies: ['Android Studio', 'Java', 'Kotlin', 'Firebase', 'REST APIs'],
    assignments: [
      'Basic UI Applications',
      'Database Integration App',
      'Network-enabled App',
      'Final Project App',
    ],
    projects: ['Social Media App Clone', 'E-commerce Mobile App'],
    assessment: {
      assignments: 40,
      projects: 50,
      participation: 10,
    },
    enrollmentCount: 22,
    rating: 4.8,
    feedback: [
      'Very practical and industry-relevant',
      'Great project-based learning approach',
      'Excellent guidance on app development',
    ],
    iconName: 'Code2',
    status: 'completed',
  },
];

// All courses combined
export const allCourses: CourseData[] = [
  ...coursesTaughtIUB,
  ...coursesTaughtBRACU,
];

// Filter functions
export const getCoursesByInstitution = (institution: CourseInstitution) =>
  allCourses.filter((course) => course.institution === institution);

export const getCoursesByLevel = (level: CourseData['level']) =>
  allCourses.filter((course) => course.level === level);

export const getCoursesByStatus = (status: CourseStatus) =>
  allCourses.filter((course) => course.status === status);

export const getCoursesByYear = (year: number) =>
  allCourses.filter((course) => course.year === year);
